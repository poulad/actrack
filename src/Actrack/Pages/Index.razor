@page "/"
@inject IJSRuntime js
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<button type="button" class="btn btn-primary" @onclick="@RegisterServiceWorker">Register Service Worker</button>

<button type="button" class="btn btn-success" @onclick="@Foo">Local Storage</button>

@code {
    async void Foo() {
        await localStorage.SetItemAsync("foo", new { bar = "baz" });
    }

    public async void RegisterServiceWorker()
    {
        bool hasSw = await HasFeatureServiceWorker();
        System.Console.WriteLine($"Has service worker? {hasSw}");
        await js.InvokeAsync<object>("window.actrack.sw.register", "sw.js");
    }

    async Task<bool> HasFeatureServiceWorker()
    {
        bool? hasSw = await js.InvokeAsync<bool?>("eval", "'serviceWorker' in navigator");
        return hasSw ?? false;
    }

    [JSInvokable]
    public static Task OnServiceWorkerRegistered()
    {
        System.Console.WriteLine("Registered");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task<object> OnServiceWorkerRegistrationFailed(string json)
    {
        System.Console.WriteLine("Registered");
        System.Console.WriteLine(json);
        return Task.FromResult(json as object);
    }

    public struct JsResult<T>
    {
        public T result;
        public string error;
    }
}
